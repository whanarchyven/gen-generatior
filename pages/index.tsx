import type {NextPage} from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {useEffect, useState} from "react";
import it from "node:test";
import ItemCard from "../components/ItemCard";

import ItemCardInterface from "../interfaces/itemCardInterface";
import GeneratePop from "../components/GeneratePop";


const Home: NextPage = () => {

    const inititalData: ItemCardInterface[] = [] ;
    const [workData, setWorkData] = useState(inititalData);

    const parserFunc = async () => {
        let response= await fetch('https://gen-generatior.vercel.app/api/gens');
        // let response = await fetch('http://localhost:3000/api/gens');
        response.json().then(function (data) {
            console.log(data);
            data.map((gen: any) => {
                let obj = {
                    item: {
                        category: gen.category,
                        type: gen.type,
                        name: gen.name,
                        short_name: gen.short_name,
                        rarity: gen.rarity,
                        increase: {
                            str: 0,
                            dex: 0,
                            vit: 0,
                            int: 0,
                            krm: 0
                        }
                    }
                }
                if (gen.str != 0) {
                    obj.item.increase.str = gen.str
                }
                if (gen.dex != 0) {
                    obj.item.increase.dex = gen.dex
                }
                if (gen.int != 0) {
                    obj.item.increase.int = gen.int
                }
                if (gen.vit != 0) {
                    obj.item.increase.vit = gen.vit
                }
                if (gen.krm != 0) {
                    obj.item.increase.krm = gen.krm
                }

                if (inititalData.findIndex(item => item.item.name == obj.item.name) == -1) {
                    inititalData.push(obj)
                }

            })
            setWorkData([...inititalData]);
        });
    }

    useEffect(() => {
        parserFunc();
    }, [])


    const [choosenItem, setChoosenItem] = useState(workData[0])

    const [popOpen, setPopOpen] = useState(false);

    const togglePop = () => {
        setPopOpen(!popOpen);
    }

    const stats: ('str' | 'dex' | 'int' | 'krm' | 'vit')[] = [
        'str', 'dex', 'vit', 'int', 'krm'
    ]

    const categories = [
        'background', 'eyes', 'mouth', 'scar', 'ears', 'body', 'texture'
    ]

    const [choosenCategory, setChoosenCategory] = useState(categories[0])

    const rarities = [
        {
            rarity: 'common',
            categories: 1,
            increase: 3,
        },
        {
            rarity: 'uncommon',
            categories: 2,
            increase: 6,
        },
        {
            rarity: 'rare',
            categories: 3,
            increase: 9,
        }
    ]

    return (
        <div className={'bg-black'}>
            <Head>
                <title>GEN GENERATOR</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={'w-full h-full flex justify-center items-center bg-black  p-4'}>
                <div className={'w-full h-16 bg-white fixed z-20 top-0 flex flex-row items-center justify-around'}>
                    {categories.map(cat => {
                        if (cat == choosenCategory) {
                            return <div className={'p-5 bg-black text-white cursor-pointer'}>{cat}</div>
                        } else {
                            return <div className={'p-5 border-2 border-black text-black cursor-pointer'}
                                        onClick={() => {
                                            setChoosenCategory(cat)
                                        }}>{cat}</div>
                        }
                    })}
                </div>
                <div className={'w-full grid-cols-4 gap-10 h-full grid pt-10 pb-10'}>
                    {workData.map((item, item_index) => {
                        if (item.item.category == choosenCategory) {
                            return <div className={'mt-10 w-full h-[600px] flex justify-center flex-wrap'}
                                        key={item.item.name}>
                                <ItemCard item={item.item}></ItemCard>
                                <button onClick={() => {
                                    setChoosenItem(item);
                                    togglePop()
                                }} className={'h-10 bg-white mt-5 w-full rounded-2xl'}>Generate
                                </button>
                            </div>
                        } else {
                            return null
                        }
                    })}
                </div>
                {popOpen ? <GeneratePop item={choosenItem} togglePop={togglePop}></GeneratePop> : null}
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16}/>
          </span>
                </a>
            </footer>
        </div>
    )
}

export default Home
